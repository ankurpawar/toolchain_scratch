NOTE â€“ 
1. This document is based on my personal experience and understanding. This
   may be different from others.
2. First read man page of any command that is not known or whose output is 
   not known.
3. Don't execute any command that install anything in the /usr/bin
   or any such directory that contains files important for the Host system.
4. Don't copy and execute any given command directly.

--------------------------------------------------------------------------------
Read about the following commands before starting
make
diff
patch
readelf
file
ln

--------------------------------------------------------------------------------
Types of cross compilation

Type           Host(make)    Build(gcc -o hello.c)   Target(./a.out)
Native         x86           x86                     x86
Cross Native   x86           ARM                     ARM
Cross Compile  x86           x86                     ARM
Cross Canadian x86           PowerPC                 ARM

From here onwards Host will be X86 and Target will be ARM

--------------------------------------------------------------------------------
For making a cross compiler toolchain packages required are
1. Binutils source 
2. GCC source
3. Kernel source
4. Glibc source

Sequence for building packages
1. Binutils
2. Kernel Headers (Kernel include files)
3. GCC (minimal/bootstrap)
4. Glibc
5. GCC (complete)

Before starting first understand the significance of these packages.
Q1. Why they are required?
Q2. What they will do on host system and target system?
Q3. How they will be built?

And last question that is above all
Q4. What we are going to achieve?
 
Answer to Q3 is simplest and it is covered in most of this document.
Follow some basic steps. If error comes resolve it and packages will
be built.

Answer to Q1. Binutils
GCC will compile the code for the target architecture.
Glibc is required for the definition of standard library functions that will 
run on target. For example printf is a standard library function. We require 
definition of this function when program is build. The linker will link the 
code with libc.so.

Answer to Q4. We will have collection of utilities and library required to 
compile from a simple helloworld program to bootloader andkernel for the target.

After reading many documents online found few important points. Each one was 
using more or less these packages. The sequence of steps involved in building 
packages were different. For example someone was building glibc before GCC 
minimal, someone was building it after. Final result is same.

--------------------------------------------------------------------------------
Create directory hierarchy 
TOOLCHAIN 
    |-- buildtools
    |   |-- binutils
    |   `-- gcc
    |-- packages  
    |   |-- binutils-2.24.tar.bz2 
    |   |-- gcc-4.5.1.tar.bz2 
    |   |-- glibc-2.13.tar.bz2 
    |   `-- linux-2.6.38.8.tar.bz2 
    `-- tools 
        `-- arm-linux
 
--------------------------------------------------------------------------------
Export variables
(this will be only available to the current shell if a new tab or window
is opened these path must be exported again)
~$ export PREFIX=/path/to/TOOLCHAIN/tools
~$ export TARGET=arm-linux
~$ export PATH=$PREFIX/bin:$PATH

Now start building Packages

--------------------------------------------------------------------------------
1. Binutils
extract the contents from compressed archive
~$ /TOOLCHAIN/packages$ tar -xvf binutils-2.24.tar.bz2
(drop -v option to disable the file list)

~$ cd TOOLCHAIN/buildtools/binutils
binutils help
~$ ../../binutils-2.24/configure --help  (look for system types)

By default, `make install' will install all the files in 
`/usr/local/bin', `/usr/local/lib' etc.  You can specify 
an installation prefix other than `/usr/local' using `--prefix', 
for instance `--prefix=$HOME'.

System types: 
  --build=BUILD     configure for building on BUILD [guessed] 
  --host=HOST       cross-compile to build programs to run on HOST [BUILD] 
  --target=TARGET   configure for building compilers for TARGET [HOST] 

configure binutils
~$ ../binutils/configure --target=$TARGET --prefix=$PREFIX

make and install
~$ make
~$ make check
~$ make install

To verify, goto TOOLCHAIN/tools, a new bin directory is created with the
binutils binaries 
  tools
    |-- arm-linux
    `-- bin
        |-- arm-linux-as
        |-- arm-linux-ld
        |-- arm-linux-nm
        |-- arm-linux-objcopy
        |-- arm-linux-objdump

This will show the some information related to target
~$ ./arm-linux-ld --help
~$ ./arm-linux-objcopy --info

--------------------------------------------------------------------------------
Kernel Headers

The linux kernel's exported header files describe the API for user space
programs attempting to use kernel services. These kernel header files are
used by the system's C library (such as glibc or uClibc) to define available
system calls, as well as constants and structures to be used with these
system calls.

There are two ways to do this
1. Copy manually
Extract kernel source from archive
~$ cd TOOLCHAIN/packages/
~$ tar -xf linux-2.6.38.8.tar.bz2
~$ make ARCH=arm menuconfig

a. Enable debugging features in kernel
   Kernel Hacking -> Kernel Debugging
b. Kernel Features -> Use ARM eabi to compile the kernel
   select the ARM eabi to compile the kernel in kernel configuration

~$ mkdir $TARGET/include
~$ cp -r include/linux $TARGET/include
~$ cp -r include/asm-arm $TARGET/include/asm
~$ cp -r include/asm-generic $TARGET_PREFIX/include/

cd arch/arm
create directory TARGET/include/asm  (new kernel)
                 TARGET/include/asm-generic (old kernel)
copy files from linux/arch/arm to above path

2. A better and recommended way given in 
   linux-src/Documentation/make/headers_install.txt
   make headers_install ARCH=arm INSTALL_HDR_PATH=$TARGET

Want to keep the source folder clean then use O=path_to_the_install_linux 
with make command (linux kernel in nutshell)
 make O=~/linux/linux-2.6.17.11

~$ make KBUILD_OUTPUT=/path/to/buildtools/linux/ \
        O=/path/to/buildtools/linux/ \ 
        ARCH=arm \
        menuconfig
~$ make KBUILD_OUTPUT=/path/to/buildtools/linux/ \
        O=/path/to/buildtools/linux/ \
        headers_install \
        ARCH=arm \
        INSTALL_HDR_PATH=/path/to/tools/arm-linux/

After running these commands goto TOOLCHAIN/tools new directories will be 
created inside arm-linux directory. 
      tools
	|-- arm-linux
	|   |-- bin
	|   |-- include
	|   `-- lib
	`-- bin
	    |-- arm-linux-addr2line
	    |-- arm-linux-ar
	    |-- arm-linux-as
	    |-- arm-linux-ld

--------------------------------------------------------------------------------
GCC (minimal/bootstrap)
While building GCC error may come in libliberty, libstd++, libgcc, intl. Before
configuring read the GCC configuration HTML page given in INSTALL folder. This
page describes the available options.

GMP devel, MPFR devel, MPC devel packages should be present on the host system.
These packages are required to build the target GCC from its source. The header
files and library files are required.

Steps to install them on the host system (for Ubuntu)
~$ sudo apt-get install libgmp3-dev
~$ sudo apt-get install libmpc-dev
~$ sudo apt-get install libmpfr-dev

Extract GCC from its archive
~$ cd TOOLCHAIN/packages/
~$ tar -xf gcc-4.5.1.tar.bz2
~$ cd TOOLCHAIN/buldtools/gcc
~$ ./../../packages/gcc-4.5.1/configure --help

Run this command to know about host system.
~$ config.guess
x86_64-unknown-linux-gnu

Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

--enable-languages=c
Specify that only a particular subset of compilers and their runtime libraries 
should be built.

--disable-multilib
Specify that multiple target libraries to support different target variants, 
calling conventions, etc. should not be built.

--disable-shared to build only static libraries

--without-headers
Tells GCC not use any target headers from a libc when building a cross 
compiler. When crossing to GNU/Linux, you need the headers so GCC can build 
the exception handling for libgcc.

--with-gnu-as Specify that the compiler should assume that the assembler it 
finds is the GNU assembler.

--with-gnu-ld Same as --with-gnu-as but for the linker. 

Configure GCC
~$ ../../packages/gcc/configure --prefix=$PREFIX --target=$TARGET \
	--disable-multilib --disable-shared --without-headers \
	--enable-languages=c --disable-nls --disable-threads \
	--with-gnu-as --with-gnu-ld

~$ make all-gcc
~$ make install-gcc

--------------------------------------------------------------------------------
Glibc

--------------------------------------------------------------------------------
GCC complete

--------------------------------------------------------------------------------
Errors
1. In command make all-gcc don't forget to put - . Otherwise a lot of error 
comes later during build phase. 

--------------------------------------------------------------------------------

