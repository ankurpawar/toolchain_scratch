NOTE – 
1. First read man page of any command that is not known or whose output is 
   not known.
2. Don't execute any command that install anything in the /usr/bin
   or any such directory that contains files important for the Host system.
3. Don't copy and execute any given command directly.

-----------------------------------

Read about these following commands before starting 
make
diff
patch
readelf
file
ln


-----------------------------------

Types of cross compilation

Type           Host(make)    Build(gcc -o hello.c)   Target(./a.out)
Native         x86           x86                     x86
Cross Native   x86           ARM                     ARM
Cross Compile  x86           x86                     ARM
Cross Canadian x86           PowerPC                 ARM


-----------------------------------

Cross compilation required packages
1. Binutils
2. Kernel Headers (Kernel source code)
3. GCC (minimal/bootstrap)
4. Glibc
5. GCC (complete)

Before starting first understand the significance of these packages.
1. Why they are required?
2. What they will do on host system and target system?
3. How they will be built?

And last question that is above all
4. What we are going to achieve?



After reading many documents online found few important points. 
Each one was using more or less these packages. The sequence of steps involved in 
building packages were different. For example someone was building glibc before 
GCC minimal, someone was building it after. Final result is same.



-----------------------------------
Create directory hierarchy 
TOOLCHAIN 
    |-- buildtools 
    |   `-- binutils 
    |-- packages 
    |   |-- binutils-2.24 
    |   |-- binutils-2.24.tar.bz2 
    |   |-- gcc-4.5.1.tar.bz2 
    |   |-- glibc-2.13.tar.bz2 
    |   |-- gmp-5.0.1.tar.bz2 
    |   |-- linux-2.6.38.8.tar.bz2 
    |   |-- mpc-0.8.2.tar.gz 
    |   `-- mpfr-3.0.0.tar.bz2 
    `-- tools 
        `-- arm-unknown-linux-gnueabi 
                       

Export variables
(only for the current shell)
~$ export PREFIX=/home/ankur/emblogic/TOOLCHAIN/
~$ export TARGET=arm-unknown-linux-gnueabi

Building Packages
1. Binutils
extract the contents from compressed archive
~$ /TOOLCHAIN/packages$ tar -xvf binutils-2.24.tar.bz2

binutils help
~$ ../binutils/configure --help  (look for system types)

By default, `make install' will install all the files in 
`/usr/local/bin', `/usr/local/lib' etc.  You can specify 
an installation prefix other than `/usr/local' using `--prefix', 
for instance `--prefix=$HOME'.


System types: 
  --build=BUILD     configure for building on BUILD [guessed] 
  --host=HOST       cross-compile to build programs to run on HOST [BUILD] 
  --target=TARGET   configure for building compilers for TARGET [HOST] 

configure binutils
~$ ../binutils/configure --prefix=$PREFIX/buildtools/binutils --target=$TARGET

make and install
~$ make
~$ make install

to verify locate ld-new or objcopy and types commands
~$ ld-new --help
~$ objcopy --info


Kernel Headers

The linux kernel's exported header files describe the API for user space
programs attempting to use kernel services.  These kernel header files are
used by the system's C library (such as glibc or uClibc) to define available
system calls, as well as constants and structures to be used with these
system calls.

extract kernel source from archive
~$ tar -xf linux-2.6.38.8.tar.bz2
~$ make ARCH=arm menuconfig

Want to keep the source folder clean then use O=path_to_the_install_linux 
with make command 
~$ make O=~/linux/linux-2.6.17.11

make KBUILD_OUTPUT=/path/to/linux/source/ O=/path/to/linux/source/ ARCH=arm menuconfig
make KBUILD_OUTPUT=/path/to/linux/source/ O=/path/to/linux/source/ ARCH=arm headers_install ARCH=arm INSTALL_HDR_PATH=/path/to/arm-unknown-linux-gnueabi/

a. Enable debugging features in kernel
   Kernel Hacking -> Kernel Debugging
b. Kernel Features -> Use ARM eabi to compile the kernel

select the ARM eabi to compile the kernel in kernel configuration

~$ mkdir $TARGET/include
~$ cp -r include/linux $TARGET/include
~$ cp -r include/asm-arm $TARGET/include/asm
~$ cp -r include/asm-generic $TARGET_PREFIX/include/


cd arch/arm
create directory TARGET/include/asm  (new kernel)
                 TARGET/include/asm-generic (old kernel)
copy files from linux/arch/arm to above path

A better and recommended way given in 
linux-src/Documentation/make/headers_install.txt
~$ make headers_install ARCH=arm INSTALL_HDR_PATH=$TARGET

GCC (minimal)
error may come in libliberty, libstdc++, libgcc, intl
cd install README
installing GCC configuration
~$ cd buildtools 
~$ mkdir gcc
~$ cd gcc
~$ ./../../packages/gcc-4.5.1/configure –-help
Installation directories:
  --prefix=PREFIX         install architecture-independent files in PREFIX
                          [/usr/local]
  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX
                          [PREFIX]

By default, `make install' will install all the files in
`/usr/local/bin', `/usr/local/lib' etc.  You can specify
an installation prefix other than `/usr/local' using `--prefix',
for instance `--prefix=$HOME'.

--enable-languages=c
Specify that only a particular subset of compilers and their runtime libraries should be built.

--disable-multilib
Specify that multiple target libraries to support different target variants, calling conventions, etc. should not be built.

--disable-shared to build only static libraries

--without-headers
    Tells GCC not use any target headers from a libc when building a cross compiler. When crossing to GNU/Linux, you need the headers so GCC can build the exception handling for libgcc.

~/TOOLCHAIN/buildtools/gcc$ ./../../packages/gcc/configure --prefix=/home/ankur/emblogic/TOOLCHAIN/ --target=arm-unknown-linux-gnueabi --diable-multilib --disable-shared --without-headers --enable-language="c" --disable-nls --with-gmp-include=/ho


~$ config.guess
x86_64-unknown-linux-gnu

install m4 macro processor
