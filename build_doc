NOTE – 
1. First read man page of any command that is not known or whose output is 
   not known.
2. Don't execute any command that install anything in the /usr/bin
   or any such directory that contains files important for the Host system.
3. Don't copy and execute any given command directly.

Ref: http://pmc.polytechnique.fr/pagesperso/dc/arm-en.html
Almost all the steps were taken from this document
--------------------------------------------------------------------------------
Read about the following commands before starting
make
diff
patch
readelf
file
ln

--------------------------------------------------------------------------------
Types of cross compilation

Type           Host(make)    Build(gcc -o hello.c)   Target(./a.out)
Native         x86           x86                     x86
Cross Native   x86           ARM                     ARM
Cross Compile  x86           x86                     ARM
Cross Canadian x86           PowerPC                 ARM

From here onwards Host will be X86 and Target will be ARM

--------------------------------------------------------------------------------
For making a cross compiler toolchain packages required are
1. Binutils source 
2. GCC source
3. Kernel source
4. Glibc source

Sequence for building packages
1. Binutils
2. Kernel Headers (Kernel include files)
3. GCC (bootstrap)
4. Glibc(headers)
5. Glibc(complete)
6. GCC (for arm)
7. GMP (static for arm)
8. MPFR (static for arm)
5. GCC (complete)

Before starting first understand the significance of these packages.
Q1. Why they are required?
Q2. What they will do on host system and target system?
Q3. How they will be built?

And last question that is above all
Q4. What we are going to achieve?
 
Answer to Q3 is simplest and it is covered in most of this document.
Follow some basic steps. If error comes resolve it and packages will
be built.

Answer to Q1. Binutils
GCC will compile the code for the target architecture.
Glibc is required for the definition of standard library functions that will 
run on target. For example printf is a standard library function. We require 
definition of this function when program is build. The linker will link the 
code with libc.so.

Answer to Q4. We will have collection of utilities and library required to 
compile from a simple helloworld program to bootloader andkernel for the target.

After reading many documents online found few important points. Each one was 
using more or less these packages. The sequence of steps involved in building 
packages were different. For example someone was building glibc before GCC 
minimal, someone was building it after. Final result is same.

--------------------------------------------------------------------------------
Create directory hierarchy 
arm-toolchain-glibc
    |-- buildtools
    |   |-- binutils
    |	|-- gcc-1
    |	|-- gcc-2
    |	|-- gcc-3
    |	|-- glibc-hdr
    |	|-- glibc
    |	|-- gmp
    |   `-- mpfr
    |-- packages
    |   |-- binutils-2.24.tar.bz2 
    |   |-- gcc-4.7.3.tar.bz2 
    |   |-- glibc-2.17.tar.bz2
    |   |-- gmp-5.0.1.tar.bz2
    |   |-- gmp-5.0.1.tar.bz2
    |   |-- linux-2.6.38.8.tar.bz2
    |   `-- mpfr-3.0.0.tar.bz2
    `-- toolchain
        `-- sysroot

--------------------------------------------------------------------------------
Open two terminal windows. T1,T2

Export variables for T1
(this will be only available to the current shell if a new tab or window
is opened these path must be exported again)
~$ export PREFIX=arm-toolchain-glibc/toolchain
~$ export TARGET=arm-linux-gnueabi
~$ export SYSROOT=$PREFIX/sysroot

Export variables for T2
~$ export PREFIX=toolchain
~$ export TARGET=arm-linux-gnueabi
~$ export SYSROOT=$PREFIX/sysroot
~$ export CROSS=arm-linux-gnueabi
~$ export CC=${CROSS}-gcc
~$ export LD=${CROSS}-ld
~$ export AS=${CROSS}-as

--------------------------------------------------------------------------------
1. Binutils
in terminal T1
extract the contents from compressed archive
~$ arm-toolchain-glibc/packages$ tar -xvf binutils-2.24.tar.bz2
(drop -v option to disable the file list)

~$ cd arm-toolchain-glibc/buildtools/binutils
binutils help
~$ ../../binutils-2.24/configure --help  (look for system types)

By default, `make install' will install all the files in 
`/usr/local/bin', `/usr/local/lib' etc.  You can specify 
an installation prefix other than `/usr/local' using `--prefix', 
for instance `--prefix=$HOME'.

System types: 
  --build=BUILD     configure for building on BUILD [guessed] 
  --host=HOST       cross-compile to build programs to run on HOST [BUILD] 
  --target=TARGET   configure for building compilers for TARGET [HOST] 

configure binutils
~$ ../binutils/configure --target=$TARGET \
			--prefix=$PREFIX \
			--with-sysroot=$SYSROOT

--disable-multilib to build only for 32 bit
make and install
~$ make
~$ make install

This will show the some information related to target
~$ cd toolchain/bin
~$ ./arm-linux-gnueabi-ld --help
~$ ./arm-linux-gnueabi-objcopy --info

--------------------------------------------------------------------------------
Kernel Headers

The linux kernel's exported header files describe the API for user space
programs attempting to use kernel services. These kernel header files are
used by the system's C library (such as glibc or uClibc) to define available
system calls, as well as constants and structures to be used with these
system calls.

Extract kernel source from archive
~$ cd TOOLCHAIN/packages/
~$ tar -xf linux-2.6.38.8.tar.bz2

Recommended way given in linux-src/Documentation/make/headers_install.txt

~$ make ARCH=arm INSTALL_HDR_PATH=$SYSROOT/usr/ headers_install

--------------------------------------------------------------------------------
GCC Bootstrap
in terminal T1

~$ ../../packages/gcc-4.7.3/configure --prefix=${PREFIX} \
	--target=${TARGET} \
	--without-headers \
	--enable-bootstrap \
	--enable-languages=c \
	--disable-threads \
	--enable-__cxa_atexit \
	--disable-libssp \
	--disable-libgomp \
	--disable-nls \
	--disable-shared \
	--with-gnu-as 
	--with-gnu-ld

~$ make -j4 all-gcc
~$ make install-gcc

~$ make all-target-libgcc 
~$ make install-target-libgcc


ln -s /path-to/arm-toolchain-glibc/toolchain/lib/gcc/arm-linux-gnueabi/4.7.3/libgcc.a 
      /path-to/arm-toolchain-glibc/toolchain/lib/gcc/arm-linux-gnueabi/4.7.3/libgcc_sh.a


--------------------------------------------------------------------------------
Glibc headers
in terminal T2

export PATH=$PREFIX/bin:$PATH
~$echo "libc_cv_forced_unwind=yes" > config.cache
~$echo "libc_cv_c_cleanup=yes" >>config.cache 

~$ ../../packages/glibc-2.17/configure --host=$TARGET \
	--prefix=$SYSROOT/usr \
	--with-headers=$SYSROOT/usr/include \
	--config-cache \
	--enable-add-ons=ports,nptl \
	--enable-kernel=2.6.0

in newer glibc ports are moved inside glibc source directory.

~$ make -k install-headers cross_compiling=yes install_root=$SYSROOT 

ln -s /path-to/arm-toolchain-glibc/toolchain/lib/gcc/arm-linux-gnueabi/4.7.3/libgcc.a 
      /path-to/arm-toolchain-glibc/toolchain/lib/gcc/arm-linux-gnueabi/4.7.3/libgcc_eh.a

-------------------------------------------------------------------------------
Glibc complete
in terminal T2

~$ echo "libc_cv_forced_unwind=yes" > config.cache
~$ echo "libc_cv_c_cleanup=yes" >> config.cache

~$ ../../packages/glibc-2.17/configure --host=$TARGET \
	--prefix=/usr \
	--with-headers=$SYSROOT/usr/include \
	--config-cache \
	--enable-add-ons=ports,nptl \
	--enable-kernel=2.6.0

~$ make -k install-headers cross_compiling=yes install_root=$SYSROOT 
~$ make
~$ make install_root=$SYSROOT install

-------------------------------------------------------------------------------
GCC stage 2
in terminal T1
~$ export CC=gcc
~$ echo "libc_cv_forced_unwind=yes" > config.cache
~$ echo "libc_cv_c_cleanup=yes" » config.cache
~$ ../../packages/gcc-4.7.3/configure --target=$TARGET \
	--prefix=$PREFIX \
	--with-sysroot=$SYSROOT \
	--enable-languages=c \
	--with-gnu-as \
	--with-gnu-ld \
	--disable-multilib \
	--with-float=soft \
	--disable-sjlj-exceptions \
	--disable-nls \
	--enable-threads=posix \
	--enable-long-longx

make all-gcc
make install-gcc

-------------------------------------------------------------------------------
GMP
in terminal T2
~$ export CFLAGS=-static
~$ ../../packages/gmp-5.0.1/configure --host=$TARGET \
	--prefix=$PREFIX \
	--disable-shared

~$ make 
~$ make install

MPFR
in terminal T2
~$ ../../packages/mpfr-3.0.0/configure --host=$TARGET \
	--prefix=$PREFIX \
	--with-gmp=$PREFIX
~$ make
~$ make install

-------------------------------------------------------------------------------
GCC final
in terminal T1
~$ export CC=gcc
~$ echo "libc_cv_forced_unwind=yes" > config.cache
~$ echo "libc_cv_c_cleanup=yes" » config.cache
~$ ../../packages/gcc-4.7.3/configure --target=$TARGET \
	--prefix=$PREFIX \
	--with-sysroot=$SYSROOT \
	--enable-languages=c \
	--with-gnu-ld \
	--with-gnu-as \
	--disable-multilib \
	--with-float=soft \
	--disable-sjlj-exceptions \
	--disable-nls \
	--enable-threads=posix \
	--disable-libmudflap \
	--disable-libssp \
	--enable-long=longx \
	--with-shared \
	--with-gmp=$PREFIX \
	--with-mpfr=$PREFIX
~$ make
~$ make install

-------------------------------------------------------------------------------
Test the Toolchain

~$ arm-linux-gnueabi-gcc -o hello hello.c
~$ file hello
hello: ELF 32-bit LSB  executable, ARM, EABI5 version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.16, not stripped

-------------------------------------------------------------------------------
The toolchain directory structure final

toolchain
|-- arm-linux-gnueabi
|   |-- bin
|   |   |-- ar
|   |   |-- as
|   |   |-- c++
|   |   |-- g++
|   |   |-- gcc
|   |   |-- ld
|   |   |-- ld.bfd
|   |   |-- nm
|   |   |-- objcopy
|   |   |-- objdump
|   |   |-- ranlib
|   |   `-- strip
|   `-- lib
|       |-- ldscripts
|       |-- libgcc_s.so
|       |-- libgcc_s.so.1
|       |-- libgomp.a
|       |-- libgomp.la
|       |-- libgomp.so -> libgomp.so.1.0.0
|       |-- libgomp.so.1 -> libgomp.so.1.0.0
|       |-- libgomp.so.1.0.0
|       `-- libgomp.spec
|-- bin
|   |-- arm-linux-gnueabi-addr2line
|   |-- arm-linux-gnueabi-ar
|   |-- arm-linux-gnueabi-as
|   |-- arm-linux-gnueabi-c++
|   |-- arm-linux-gnueabi-c++filt
|   |-- arm-linux-gnueabi-cpp
|   |-- arm-linux-gnueabi-elfedit
|   |-- arm-linux-gnueabi-g++
|   |-- arm-linux-gnueabi-gcc
|   |-- arm-linux-gnueabi-gcc-4.7.3
|   |-- arm-linux-gnueabi-gcc-ar
|   |-- arm-linux-gnueabi-gcc-nm
|   |-- arm-linux-gnueabi-gcc-ranlib
|   |-- arm-linux-gnueabi-gcov
|   |-- arm-linux-gnueabi-gprof
|   |-- arm-linux-gnueabi-ld
|   |-- arm-linux-gnueabi-ld.bfd
|   |-- arm-linux-gnueabi-nm
|   |-- arm-linux-gnueabi-objcopy
|   |-- arm-linux-gnueabi-objdump
|   |-- arm-linux-gnueabi-ranlib
|   |-- arm-linux-gnueabi-readelf
|   |-- arm-linux-gnueabi-size
|   |-- arm-linux-gnueabi-strings
|   `-- arm-linux-gnueabi-strip
|-- include
|   |-- gmp.h
|   |-- mpf2mpfr.h
|   `-- mpfr.h
|-- lib
|   |-- gcc
|   |   `-- arm-linux-gnueabi
|   |-- libgmp.a
|   |-- libgmp.la
|   |-- libiberty.a
|   |-- libmpfr.a
|   `-- libmpfr.la
|-- libexec
|   `-- gcc
|       `-- arm-linux-gnueabi
|-- share
|   |-- doc
|   |   `-- mpfr
|   |-- info
|   |   |-- as.info
|   |   |-- bfd.info
|   |   |-- binutils.info
|   |   |-- configure.info
|   |   |-- cpp.info
|   |   |-- cppinternals.info
|   |   |-- dir
|   |   |-- gcc.info
|   |   |-- gccinstall.info
|   |   |-- gccint.info
|   |   |-- gmp.info
|   |   |-- gmp.info-1
|   |   |-- gmp.info-2
|   |   |-- gprof.info
|   |   |-- ld.info
|   |   |-- libgomp.info
|   |   |-- libquadmath.info
|   |   |-- mpfr.info
|   |   `-- standards.info
|   |-- locale
|   |   |-- bg
|   |   |-- da
|   |   |-- de
|   |   |-- eo
|   |   |-- es
|   |   |-- fi
|   |   |-- fr
|   |   |-- ga
|   |   |-- hr
|   |   |-- id
|   |   |-- it
|   |   |-- ja
|   |   |-- ms
|   |   |-- nl
|   |   |-- pt_BR
|   |   |-- ro
|   |   |-- ru
|   |   |-- rw
|   |   |-- sk
|   |   |-- sr
|   |   |-- sv
|   |   |-- tr
|   |   |-- uk
|   |   |-- vi
|   |   |-- zh_CN
|   |   `-- zh_TW
|   `-- man
|       |-- man1
|       `-- man7
`-- sysroot
    |-- etc
    |   `-- rpc
    |-- lib
    |   |-- ld-2.17.so
    |   |-- ld-linux.so.3 -> ld-2.17.so
    |   |-- libanl-2.17.so
    |   |-- libanl.so.1 -> libanl-2.17.so
    |   |-- libBrokenLocale-2.17.so
    |   |-- libBrokenLocale.so.1 -> libBrokenLocale-2.17.so
    |   |-- libc-2.17.so
    |   |-- libcrypt-2.17.so
    |   |-- libcrypt.so.1 -> libcrypt-2.17.so
    |   |-- libc.so.6 -> libc-2.17.so
    |   |-- libdl-2.17.so
    |   |-- libdl.so.2 -> libdl-2.17.so
    |   |-- libm-2.17.so
    |   |-- libmemusage.so
    |   |-- libm.so.6 -> libm-2.17.so
    |   |-- libnsl-2.17.so
    |   |-- libnsl.so.1 -> libnsl-2.17.so
    |   |-- libnss_compat-2.17.so
    |   |-- libnss_compat.so.2 -> libnss_compat-2.17.so
    |   |-- libnss_db-2.17.so
    |   |-- libnss_db.so.2 -> libnss_db-2.17.so
    |   |-- libnss_dns-2.17.so
    |   |-- libnss_dns.so.2 -> libnss_dns-2.17.so
    |   |-- libnss_files-2.17.so
    |   |-- libnss_files.so.2 -> libnss_files-2.17.so
    |   |-- libnss_hesiod-2.17.so
    |   |-- libnss_hesiod.so.2 -> libnss_hesiod-2.17.so
    |   |-- libnss_nis-2.17.so
    |   |-- libnss_nisplus-2.17.so
    |   |-- libnss_nisplus.so.2 -> libnss_nisplus-2.17.so
    |   |-- libnss_nis.so.2 -> libnss_nis-2.17.so
    |   |-- libpcprofile.so
    |   |-- libpthread-2.17.so
    |   |-- libpthread.so.0 -> libpthread-2.17.so
    |   |-- libresolv-2.17.so
    |   |-- libresolv.so.2 -> libresolv-2.17.so
    |   |-- librt-2.17.so
    |   |-- librt.so.1 -> librt-2.17.so
    |   |-- libSegFault.so
    |   |-- libthread_db-1.0.so
    |   |-- libthread_db.so.1 -> libthread_db-1.0.so
    |   |-- libutil-2.17.so
    |   `-- libutil.so.1 -> libutil-2.17.so
    |-- sbin
    |   |-- ldconfig
    |   `-- sln
    |-- usr
    |   |-- bin
    |   |-- include
    |   |-- lib
    |   |-- libexec
    |   |-- sbin
    |   `-- share
    `-- var
        `-- db

