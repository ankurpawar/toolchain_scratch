NOTE â€“
1. First read man page of any command that is not known or whose output is 
   not known.
2. Don't execute any command that install anything in the /usr/bin
   or any such directory that contains files important for the Host system.
3. Don't copy and execute any given command directly.

--------------------------------------------------------------------------------
Read about the following commands before starting
make
diff
patch
readelf
file
ln

--------------------------------------------------------------------------------
Types of cross compilation

Type           Host(make)    Build(gcc -o hello.c)   Target(./a.out)
Native         x86           x86                     x86
Cross Native   x86           ARM                     ARM
Cross Compile  x86           x86                     ARM
Cross Canadian x86           PowerPC                 ARM

From here onwards Host will be x86 and Target will be ARM

--------------------------------------------------------------------------------
For making a cross compiler toolchain packages required are
1. Binutils source 
2. GCC source
3. Linux Kernel source
4. Newlib source

Sequence for building packages
1. Binutils
2. Kernel Headers (Kernel include files)
3. GCC (minimal/bootstrap)
4. Newlib
5. GCC (complete)

Before starting first understand the significance of these packages.
Q1. Why they are required?
Q2. What they will do on host system and target system?
Q3. How they will be built?

And last question that is above all
Q4. What we are going to achieve?
 
Answer to Q3 is simplest and it is covered in most of this document.
Follow some basic steps. If error comes resolve it and packages will
be built.

Answer to Q1. Binutils
GCC will compile the code for the target architecture.
Newlib is required for the definition of standard library functions that will 
run on target. For example printf is a standard library function. We require 
definition of this function when program is build. The linker will link the 
code with libc.a.

Answer to Q4. We will have collection of utilities and library required to 
compile from a simple helloworld program to bootloader and kernel for the 
target.

After reading many documents online found few important points. Each one was 
using more or less these packages. The sequence of steps involved in building 
packages were different. For example someone was building glibc before GCC 
minimal, someone was building it after. Final result is same.

The newlib library will be built statically.
-------------------------------------------------------------------------------
Driectory hierarchy

Create some directories as shown

arm-toolchain-newlib	(mkdir)
|-- buildtools	 	(mkdir)
|   |-- binutils	(mkdir)
|   |-- gcc		(mkdir)
|   |-- newlib		(mkdir)
|-- packages		(mkdir)
|   |-- binutils-2.24	(download)
|   |-- gcc-4.5.1	(download)
|   |-- linux-2.6.38.8	(download)
|   `-- newlib-1.19.0 	(download)
`-- tools		(mkdir)
    `-- arm-elf		(mkdir)

(mkdir) Create the directory with given name
(download) download the source from website and copy it into packages 
directory.

-------------------------------------------------------------------------------
Set environment variables

~$ export PREFIX=/path/to/TOOLCHAIN_newlib/tools
~$ export TARGET=arm-elf
~$ export PATH=$PREFIX/bin:$PATH

-------------------------------------------------------------------------------
Binutils

~$cd arm-toolchain-newlib/buildtools/binutils

Configure binutils
~$../../packages/binutils-2.24/configure --target=$TARGET --prefix=$PREFIX \
	--enable-interwork --disable-multilib --disable-nls

Make and install
~$make -j 2
~$make install

-------------------------------------------------------------------------------
Kernel headers

~$ cd arm-ttolchain-newlib/packages/linux-2.6.38.8

Install headers
~$ make ARCH=arm headers_install INSTALL_HDR_PATH=$PREFIX/$TARGET

-------------------------------------------------------------------------------
GCC(bootstrap)

~$cd arm-toolchain-newlib/buildtools/gcc

Configure
~$../../packages/gcc-4.5.1/configure --prefix=$PREFIX --target=$TARGET \
	--enable-interwork --disable-multilib --enable-languages=c \
	--with-newlib --without-headers --disable-shared --disable-nls \
	--with-gnu-as --with-gnu-ld 

Make and install
~$make -j 2 all-gcc
~$make install-gcc 

-------------------------------------------------------------------------------
Newlib

~$cd arm-toolchain-newlib/buildtools/newlib

Configure
~$ ../../packages/newlib-1.19.0/configure --target=$TARGET --prefix=$PREFIX \
	--enable-interwork --disable-multilib --disable-nls --with-gnu-as \
	--with-gnu-ld

Make and install
~$make 
~$make install

-------------------------------------------------------------------------------
GCC full

~$ cd arm-toolchain-newlib/buildtools/gcc

~$ ../../packages/gcc-4.5.1/configure --prefix=$PREFIX --target=$TARGET \
	--enable-interwork --disable-multilib --enable-languages="c,c++"\
	--with-newlib --without-headers --enable-shared --disable-nls \
	--disable-hardfloat --enable-threads=single --with-gnu-ld \
	--with-gnu-as

~$make -j 2
~$make install

-------------------------------------------------------------------------------
Final Directory Hierarchy

After all the successful build the directories created are.

arm-toolchain-newlib
|-- buildtools
|   |-- binutils
|   |-- gcc
|   `-- newlib
|-- packages
|   |-- binutils-2.24
|   |-- gcc-4.5.1
|   |-- linux-2.6.38.8
|   `-- newlib-1.19.0
`-- tools
    |-- arm-elf
    |   |-- bin
    |   |-- include
    |   `-- lib
    |-- bin
    |   |-- arm-elf-addr2line
    |   |-- arm-elf-ar
    |   |-- arm-elf-as
    |   |-- arm-elf-c++
    |   |-- arm-elf-c++filt
    |   |-- arm-elf-cpp
    |   |-- arm-elf-elfedit
    |   |-- arm-elf-g++
    |   |-- arm-elf-gcc
    |   |-- arm-elf-gcc-4.5.1
    |   |-- arm-elf-gccbug
    |   |-- arm-elf-gcov
    |   |-- arm-elf-gprof
    |   |-- arm-elf-ld
    |   |-- arm-elf-ld.bfd
    |   |-- arm-elf-nm
    |   |-- arm-elf-objcopy
    |   |-- arm-elf-objdump
    |   |-- arm-elf-ranlib
    |   |-- arm-elf-readelf
    |   |-- arm-elf-size
    |   |-- arm-elf-strings
    |   `-- arm-elf-strip
    |-- include
    |-- lib
    |   |-- gcc
    |   `-- libiberty.a
    |-- libexec
    |   `-- gcc
    `-- share
        |-- gcc-4.5.1
        |-- info
        `-- man

-------------------------------------------------------------------------------
Test Toolchain

Create a hello world program
~$arm-elf -o hello hello.c

~$file hello
hello: ELF 32-bit LSB  executable, ARM, version 1, \
       statically linked, not stripped

-------------------------------------------------------------------------------
ERRORS
---------------------------------------

../../../packages/gcc-4.5.1/gcc/doc/gcc.texi:89: warning: @tex should only appear at a line beginning
../../../packages/gcc-4.5.1/gcc/doc/gcc.texi:89: warning: @end should only appear at a line beginning
../../../packages/gcc-4.5.1/gcc/doc/gcc.texi:91: warning: @tex should only appear at a line beginning
../../../packages/gcc-4.5.1/gcc/doc/gcc.texi:91: warning: @end should only appear at a line beginning
../../../packages/gcc-4.5.1/gcc/doc/invoke.texi:4878: @itemx must follow @item
../../../packages/gcc-4.5.1/gcc/doc/invoke.texi:4882: @itemx must follow @item
../../../packages/gcc-4.5.1/gcc/doc/invoke.texi:4893: @itemx must follow @item
../../../packages/gcc-4.5.1/gcc/doc/invoke.texi:4897: @itemx must follow @item
../../../packages/gcc-4.5.1/gcc/doc/invoke.texi:4942: @itemx must follow @item
../../../packages/gcc-4.5.1/gcc/doc/invoke.texi:4972: @itemx must follow @item
../../../packages/gcc-4.5.1/gcc/doc/invoke.texi:4984: @itemx must follow @item
../../../packages/gcc-4.5.1/gcc/doc/cppopts.texi:763: @itemx must follow @item

@itemx -fdump-rtl-csa
@opindex fdump-rtl-csa
Dump after combining stack adjustments.

change to 

@item -fdump-rtl-csa
@opindex fdump-rtl-csa
Dump after combining stack adjustments.
